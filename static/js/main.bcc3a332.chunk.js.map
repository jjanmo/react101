{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Genres","genres","map","genre","index","key","Movie","id","title","overview","poster","rating","release","src","alt","className","split","join","slice","API_KEY","App","props","state","isLoading","movieList","array","newObj","forEach","obj","name","axios","get","results","data","genresFormat","this","changeObj","movie","genre_ids","reduce","list","concat","console","log","setState","poster_path","vote_average","release_date","getMovieList","renderMovies","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6SAqBA,SAASA,EAAT,GAA6B,IAAXC,EAAU,EAAVA,OACd,OAAO,4BAAMA,EAAOC,KAAI,SAACC,EAAOC,GAAR,OAAkB,wBAAIC,IAAMD,GAAUD,OAanDG,MA7Bf,YAA0E,IAAzDC,EAAwD,EAAxDA,GAAIC,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,QAASX,EAAU,EAAVA,OAC3D,OACI,6BAASM,GAAKA,GACV,yBAAKM,IAAG,UALM,mCAKN,OAA0BH,GAAWI,IAAMN,EAAQA,MAAQA,IACnE,yBAAKO,UAAU,gBACX,4BAAMP,GACN,0BAAMO,UAAU,gBAAiBH,EAAQI,MAAM,KAAKC,KAAK,MAF7D,eAGI,0BAAMF,UAAU,UAAWJ,EAA3B,SACA,kBAACX,EAAD,CAAQC,OAASA,IACjB,yBAAKc,UAAU,YAAf,UAA+BN,EAASS,MAAM,EAAG,KAAjD,WCRVC,G,MAAU,oCAkEDC,E,kDA/DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,WAAW,EACXC,UAAW,IAJA,E,sDAQTC,GACN,IAAMC,EAAS,GAIf,OAHAD,EAAME,SAAQ,SAAAC,GACVF,EAAOE,EAAIrB,IAAMqB,EAAIC,QAElBH,I,6KAI6BI,IAAMC,IAAN,6DAAgEZ,EAAhE,2B,uBAApBa,E,EAARC,KAAQD,Q,SACmBF,IAAMC,IAAN,gEAAmEZ,I,gBAAtFlB,E,EAARgC,KAAQhC,OACViC,EAAeC,KAAKC,UAAUnC,GACpC+B,EAAQL,SAAQ,SAAAU,GACZA,EAAMpC,OAASoC,EAAMC,UAAUC,QAAQ,SAACC,EAAMjC,GAAP,OAAciC,EAAKC,OAAOP,EAAa3B,MAAO,OAEzFmC,QAAQC,IAAIX,GACZG,KAAKS,SAAS,CACVrB,WAAW,EACXC,UAAWQ,I,0IAINR,GACT,OAAOA,EAAUtB,KAAI,SAAAmC,GACjB,OACI,kBAAC,EAAD,CACIhC,IAAMgC,EAAM9B,GACZA,GAAK8B,EAAM9B,GACXC,MAAQ6B,EAAM7B,MACdC,SAAW4B,EAAM5B,SACjBC,OAAS2B,EAAMQ,YACflC,OAAS0B,EAAMS,aACflC,QAAUyB,EAAMU,aAChB9C,OAASoC,EAAMpC,c,0CAO3BkC,KAAKa,iB,+BAGC,IAAD,EAC4Bb,KAAKb,MAA9BC,EADH,EACGA,UAAWC,EADd,EACcA,UACnB,OACI,yBAAKT,UAAU,WACXQ,EACM,aACAY,KAAKc,aAAazB,Q,GA1DtB0B,IAAMC,WCLxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.bcc3a332.chunk.js","sourcesContent":["import React from 'react';\r\nimport Proptypes from 'prop-types';\r\nimport './Movie.css';\r\n\r\nconst POSTER_BASIC_PATH = 'https://image.tmdb.org/t/p/w154';\r\n\r\nfunction Movie({ id, title, overview, poster, rating, release, genres }) {\r\n    return (\r\n        <section id={ id }>\r\n            <img src={ `${POSTER_BASIC_PATH}${poster}` } alt={ title } title={ title } />\r\n            <div className=\"movie-detail\">\r\n                <h2>{ title }</h2>\r\n                <span className=\"release-year\">{ release.split('-').join('.') }</span>ðŸŽˆ\r\n                <span className=\"rating\">{ rating } / 10</span>\r\n                <Genres genres={ genres } />\r\n                <div className=\"overview\">{ `${overview.slice(0, 150)}...` }</div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nfunction Genres({ genres }) {\r\n    return <ul>{ genres.map((genre, index) => <li key={ index }>{ genre }</li>) }</ul>;\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: Proptypes.number.isRequired,\r\n    title: Proptypes.string.isRequired,\r\n    overview: Proptypes.string.isRequired,\r\n    poster: Proptypes.string.isRequired,\r\n    rating: Proptypes.number.isRequired,\r\n    release: Proptypes.string.isRequired,\r\n    genres: Proptypes.array.isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Movie from './Movie';\r\nimport './App.css';\r\n\r\n//GOAL : show movielist\r\n\r\nconst API_KEY = 'f064a67e0d808eb7bb367bbd759b1bcc';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            movieList: []\r\n        };\r\n    }\r\n\r\n    changeObj(array) {\r\n        const newObj = {}\r\n        array.forEach(obj => {\r\n            newObj[obj.id] = obj.name;\r\n        })\r\n        return newObj;\r\n    }\r\n\r\n    async getMovieList() {\r\n        const { data: { results } } = await axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=1`);\r\n        const { data: { genres } } = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`);\r\n        const genresFormat = this.changeObj(genres);\r\n        results.forEach(movie => {\r\n            movie.genres = movie.genre_ids.reduce(((list, id) => list.concat(genresFormat[id])), []);\r\n        })\r\n        console.log(results);\r\n        this.setState({\r\n            isLoading: false,\r\n            movieList: results\r\n        });\r\n    }\r\n\r\n    renderMovies(movieList) {\r\n        return movieList.map(movie => {\r\n            return (\r\n                <Movie\r\n                    key={ movie.id }\r\n                    id={ movie.id }\r\n                    title={ movie.title }\r\n                    overview={ movie.overview }\r\n                    poster={ movie.poster_path }\r\n                    rating={ movie.vote_average }\r\n                    release={ movie.release_date }\r\n                    genres={ movie.genres }\r\n                />\r\n            );\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMovieList();\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, movieList } = this.state;\r\n        return (\r\n            <div className=\"wrapper\">{\r\n                isLoading\r\n                    ? 'Loading...'\r\n                    : this.renderMovies(movieList)\r\n            }</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}